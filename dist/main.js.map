{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/optindex.js","webpack:///./src/test.js","webpack:///./src/utils.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,KAAK,iCAAiC,GAAG,mBAAO,CAAC,kCAAY;;;AAG7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;;AAEA;AACA,0CAA0C,qDAAqD,EAAE;AACjG;AACA,WAAW,qBAAqB,0BAA0B,kBAAkB;AAC5E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,IAAI;AACT,yBAAyB,MAAM,QAAQ,IAAI;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,wDAAwD;AACxD;AACA,YAAY,WAAW;AACvB;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA,kBAAkB,wBAAwB;;AAE1C,kBAAkB,sD;;;;;;;;;;;ACpHlB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oCAAoC,iBAAiB;AACrD,mCAAmC,KAAK,gBAAgB,SAAS;AACjE;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,kBAAkB,c;;;;;;;;;;;AChClB,KAAK,uBAAuB,IAAI,mBAAO,CAAC,kCAAY;;AAEpD,KAAK,WAAW,GAAG,mBAAO,CAAC,wCAAe;;AAE1C;AACA,kBAAkB,UAAU;AAC5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA,oCAAoC,SAAS,GAAG,gE;;;;;;;;;;;AC5BhD,kCAAkC,IAAI,EAAE,MAAM;AAC9C;AACA;;AAEA,mBAAmB,gC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/test.js\");\n","var { prefix, prefixStart, prefixEnd } = require('./utils.js');\r\n\r\n\r\nconst selfMeasure = (fn, name = fn.name) => {\r\n    const mark_start = Date.now();\r\n    fn();\r\n    const duration = Date.now() - mark_start;\r\n    return duration;\r\n}\r\n\r\n// 时间不受系统影响，时间精确\r\nconst selfMeasureV1 = (fn, name = fn.name) => {\r\n        const mark_start = performance.now();\r\n        fn();\r\n        const duration = performance.now() - mark_start;\r\n        return duration;\r\n    }\r\n    /**\r\n     * 测量某个函数的执行时间\r\n     * @param {*} fn \r\n     * @param {*} name \r\n     * \r\n     * performance.mark\r\n     * 1.创建一个新的PerformanceMark对象\r\n     * 2.将name属性设置为markName\r\n     * 3.将entryType属性设置为mark\r\n     * 4.将startTime属性设置为performance.now\r\n     * 5.将duration属性设置为0\r\n     * 6.将mark对象放入队列中\r\n     * 7.将mark对象放入performance entry buffer中\r\n     * 8.返回undefined\r\n     */\r\nconst measureV1 = (fn, name = fn.name) => {\r\n    performance.mark(prefixStart(name));\r\n    fn();\r\n    performance.mark(prefixEnd(name));\r\n}\r\n\r\n\r\nconst getMarks = key => {\r\n    return performance\r\n        .getEntriesByType('mark') // 只获取通过 performance.mark 记录的数据\r\n        .filter(({ name }) => name === prefixStart(key) || name === prefixEnd(key))\r\n}\r\n\r\nconst getDurationV1 = entries => {\r\n    //[PerformanceMark, PerformanceMark] {name:startxx, entryType:'mark', startTime:, duration} {name:endxx, entryType}\r\n    console.log(entries);\r\n    const { start = 0, end = 0 } = entries.reduce((last, { name, startTime }) => {\r\n        if (/^start/.test(name)) {\r\n            last.start = startTime\r\n        } else if (/^end/.test(name)) {\r\n            last.end = startTime\r\n        }\r\n        return last\r\n    }, {})\r\n    console.log(`start:${start}, end:${end}`)\r\n    return end - start;\r\n}\r\n\r\nconst retriveResultV1 = key => getDurationV1(getMarks(key));\r\n//----opt--v\r\nconst measure = (fn, name = fn.name) => {\r\n    const startName = prefixStart(name);\r\n    const endName = prefixEnd(name);\r\n    performance.mark(startName);\r\n    fn();\r\n    performance.mark(endName);\r\n    //调用measure，简化时间计算\r\n    performance.measure(name, startName, endName);\r\n}\r\n\r\n\r\nconst getDuration = entries => {\r\n    //直接获取duration, entries对应数组 [PerformanceMeasure对象] {duration:, entryType:'measure', name:'foo', startTime:}\r\n    console.log(entries);\r\n    const [{ duration }] = entries;\r\n    return duration;\r\n}\r\n\r\nconst retriveResult = key => getDuration(performance.getEntriesByName(key));\r\n\r\n\r\n//异步函数\r\nconst asyncMeasure = async(fn, name = fn.name) => {\r\n    const startName = prefixStart(name);\r\n    const endName = prefixEnd(name);\r\n    performance.mark(startName);\r\n    await fn();\r\n    performance.mark(endName);\r\n    //调用measure\r\n    performance.measure(name, startName, endName);\r\n}\r\n\r\n\r\n//获取首屏数据\r\n//首次绘制(first paint)不保罗默认背景绘制,但是包含非默认的背景绘制和iframe\r\nconst measureFirstPaint = () => {\r\n    performance.getEntriesByType('paint')\r\n}\r\n\r\nconst observer = new PerformanceObserver(function(list) {\r\n\r\n    const perfEntries = list.getEntries()\r\n\r\n    for (let i = 0; i < perfEntries.length; i++) {\r\n        // 处理数据\r\n        // 上报性能检测数据\r\n        console.log(\"xxx\");\r\n    }\r\n\r\n})\r\n\r\n// 注册绘制观察者\r\nobserver.observe({ entryTypes: [\"paint\"] })\r\n\r\nmodule.exports = { measure: measureV1, retriveResult: retriveResultV1 };","/**\r\n * NOTE:\r\n *         mark                                       measure\r\n * 作用   运行某个操作时，记录一个时间戳                  针对起始+结束的mark值，汇总形成一个直接可用的性能数据\r\n * 不足   对于一个操作，需要两个时间戳才能计算出性能耗时     想要测量多个操作时，需要重复调用\r\n * 进阶版\r\n **/\r\n\r\n\r\n/**使用PerformanceObserver接口，解决以下问题\r\n *1，每次查看数据时，要主动调用接口\r\n   2. 当获取不同类型的数据指标时，产生重复逻辑\r\n   3.其他资源需要同时操作 performance buffer时，产生资源竞争情况\r\n\r\n */\r\n\r\nconst getMeasure = () => {\r\n    const observer = new PerformanceObserver(list => {\r\n        list.getEntries().forEach(({ name, duration }) => {\r\n            console.log(`name is ${name}, duration is ${duration}`);\r\n            //操作数据逻辑\r\n        });\r\n    });\r\n\r\n    //只需要关注 measure 的数据\r\n    observer.observe({\r\n        entryTypes: ['measure'],\r\n        buffered: true\r\n    })\r\n    return observer;\r\n}\r\n\r\nmodule.exports = { getMeasure };","var {measure, retriveResult} =  require('./index.js');\r\n\r\nvar {getMeasure} = require('./optindex.js');\r\n\r\nfunction foo(){\r\n    for(var i = 0; i < 1000; i++){}\r\n}\r\n\r\n//--------------use optmeasure---------------------\r\n\r\n//项目入口文件的顶部\r\nlet observer;\r\nif(window.PerformanceObserver){\r\n    console.log('Observer');\r\n    observer = getMeasure();\r\n}\r\n\r\n//某个时机，释放监测\r\nif(observer){\r\n    setTimeout(()=>{\r\n        observer.disconnect();\r\n    }, 10000)\r\n}\r\n\r\nmeasure(foo);\r\n//--------------use optmeasure---------------------\r\n\r\nconst duration = retriveResult('foo');\r\nconsole.log(`foo execute duration:${duration}`); //complex 0.19999999858555384, easy 0.09999999747378752,测试精确度不同","const prefix = fix => input => `${fix}${input}`;\r\nconst prefixStart = prefix('start');\r\nconst prefixEnd = prefix('end');\r\n\r\nmodule.exports =  {prefix, prefixStart, prefixEnd};"],"sourceRoot":""}